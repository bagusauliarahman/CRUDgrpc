// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: kendaraan/kendaraan.proto

package kendaraan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MobilClient is the client API for Mobil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobilClient interface {
	GetAllMobil(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Mobil_GetAllMobilClient, error)
	GetMobil(ctx context.Context, in *Id, opts ...grpc.CallOption) (*InfoMobil, error)
	CreateMobil(ctx context.Context, in *InfoMobil, opts ...grpc.CallOption) (*Id, error)
	UpdateMobil(ctx context.Context, in *InfoMobil, opts ...grpc.CallOption) (*Status, error)
	DeleteMobil(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type mobilClient struct {
	cc grpc.ClientConnInterface
}

func NewMobilClient(cc grpc.ClientConnInterface) MobilClient {
	return &mobilClient{cc}
}

func (c *mobilClient) GetAllMobil(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Mobil_GetAllMobilClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mobil_ServiceDesc.Streams[0], "/kendaraan.Mobil/GetAllMobil", opts...)
	if err != nil {
		return nil, err
	}
	x := &mobilGetAllMobilClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mobil_GetAllMobilClient interface {
	Recv() (*InfoMobil, error)
	grpc.ClientStream
}

type mobilGetAllMobilClient struct {
	grpc.ClientStream
}

func (x *mobilGetAllMobilClient) Recv() (*InfoMobil, error) {
	m := new(InfoMobil)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mobilClient) GetMobil(ctx context.Context, in *Id, opts ...grpc.CallOption) (*InfoMobil, error) {
	out := new(InfoMobil)
	err := c.cc.Invoke(ctx, "/kendaraan.Mobil/GetMobil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilClient) CreateMobil(ctx context.Context, in *InfoMobil, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/kendaraan.Mobil/CreateMobil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilClient) UpdateMobil(ctx context.Context, in *InfoMobil, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/kendaraan.Mobil/UpdateMobil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobilClient) DeleteMobil(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/kendaraan.Mobil/DeleteMobil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobilServer is the server API for Mobil service.
// All implementations must embed UnimplementedMobilServer
// for forward compatibility
type MobilServer interface {
	GetAllMobil(*Empty, Mobil_GetAllMobilServer) error
	GetMobil(context.Context, *Id) (*InfoMobil, error)
	CreateMobil(context.Context, *InfoMobil) (*Id, error)
	UpdateMobil(context.Context, *InfoMobil) (*Status, error)
	DeleteMobil(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedMobilServer()
}

// UnimplementedMobilServer must be embedded to have forward compatible implementations.
type UnimplementedMobilServer struct {
}

func (UnimplementedMobilServer) GetAllMobil(*Empty, Mobil_GetAllMobilServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMobil not implemented")
}
func (UnimplementedMobilServer) GetMobil(context.Context, *Id) (*InfoMobil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMobil not implemented")
}
func (UnimplementedMobilServer) CreateMobil(context.Context, *InfoMobil) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMobil not implemented")
}
func (UnimplementedMobilServer) UpdateMobil(context.Context, *InfoMobil) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMobil not implemented")
}
func (UnimplementedMobilServer) DeleteMobil(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMobil not implemented")
}
func (UnimplementedMobilServer) mustEmbedUnimplementedMobilServer() {}

// UnsafeMobilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobilServer will
// result in compilation errors.
type UnsafeMobilServer interface {
	mustEmbedUnimplementedMobilServer()
}

func RegisterMobilServer(s grpc.ServiceRegistrar, srv MobilServer) {
	s.RegisterService(&Mobil_ServiceDesc, srv)
}

func _Mobil_GetAllMobil_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MobilServer).GetAllMobil(m, &mobilGetAllMobilServer{stream})
}

type Mobil_GetAllMobilServer interface {
	Send(*InfoMobil) error
	grpc.ServerStream
}

type mobilGetAllMobilServer struct {
	grpc.ServerStream
}

func (x *mobilGetAllMobilServer) Send(m *InfoMobil) error {
	return x.ServerStream.SendMsg(m)
}

func _Mobil_GetMobil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilServer).GetMobil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendaraan.Mobil/GetMobil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilServer).GetMobil(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mobil_CreateMobil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoMobil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilServer).CreateMobil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendaraan.Mobil/CreateMobil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilServer).CreateMobil(ctx, req.(*InfoMobil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mobil_UpdateMobil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoMobil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilServer).UpdateMobil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendaraan.Mobil/UpdateMobil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilServer).UpdateMobil(ctx, req.(*InfoMobil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mobil_DeleteMobil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobilServer).DeleteMobil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kendaraan.Mobil/DeleteMobil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobilServer).DeleteMobil(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Mobil_ServiceDesc is the grpc.ServiceDesc for Mobil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mobil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kendaraan.Mobil",
	HandlerType: (*MobilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMobil",
			Handler:    _Mobil_GetMobil_Handler,
		},
		{
			MethodName: "CreateMobil",
			Handler:    _Mobil_CreateMobil_Handler,
		},
		{
			MethodName: "UpdateMobil",
			Handler:    _Mobil_UpdateMobil_Handler,
		},
		{
			MethodName: "DeleteMobil",
			Handler:    _Mobil_DeleteMobil_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllMobil",
			Handler:       _Mobil_GetAllMobil_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kendaraan/kendaraan.proto",
}
